// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PythonSucks.Data;

namespace PythonSucks.Data.Migrations
{
    [DbContext(typeof(PythonSucksDbContext))]
    partial class PythonSucksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PythonSucks.Model.Hater", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChildTrauma")
                        .IsRequired();

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Surname");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Hater");

                    b.HasData(
                        new { Id = new Guid("59a7731a-a094-4550-a62e-9782dbc05bd6"), ChildTrauma = "His bike was pink.", CreateDate = new DateTime(2018, 10, 24, 16, 12, 32, 207, DateTimeKind.Utc), Name = "Gonzalo", Surname = "Rubio", UpdateDate = new DateTime(2018, 10, 24, 16, 12, 32, 207, DateTimeKind.Utc) },
                        new { Id = new Guid("d60ae259-4a0a-4ee5-88da-ca56d8afadd8"), ChildTrauma = "He saw his parents in bed.", CreateDate = new DateTime(2018, 10, 24, 16, 12, 32, 208, DateTimeKind.Utc), Name = "Jorge", Surname = "Jardines", UpdateDate = new DateTime(2018, 10, 24, 16, 12, 32, 208, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("PythonSucks.Model.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<Guid>("HaterId");

                    b.Property<int>("RageLevel");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("HaterId");

                    b.ToTable("Reason");

                    b.HasData(
                        new { Id = new Guid("59a7731a-a094-4550-a62e-9782dbc05bd6"), CreateDate = new DateTime(2018, 10, 24, 16, 12, 32, 214, DateTimeKind.Utc), Description = "Python grammar is not as easy as people say.", HaterId = new Guid("59a7731a-a094-4550-a62e-9782dbc05bd6"), RageLevel = 2, Title = "Grammar", UpdateDate = new DateTime(2018, 10, 24, 16, 12, 32, 214, DateTimeKind.Utc) },
                        new { Id = new Guid("00122ce4-91b5-46ba-88a4-7e956d70b5df"), CreateDate = new DateTime(2018, 10, 24, 16, 12, 32, 214, DateTimeKind.Utc), Description = "No interfaces! WTF!", HaterId = new Guid("59a7731a-a094-4550-a62e-9782dbc05bd6"), RageLevel = 5, Title = "Interfaces", UpdateDate = new DateTime(2018, 10, 24, 16, 12, 32, 214, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("PythonSucks.Model.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired();

                    b.Property<string>("IdentityUserId")
                        .IsRequired();

                    b.Property<Guid>("ReasonId");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("ReasonId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PythonSucks.Model.Reason", b =>
                {
                    b.HasOne("PythonSucks.Model.Hater", "Hater")
                        .WithMany("Reasons")
                        .HasForeignKey("HaterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PythonSucks.Model.Vote", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PythonSucks.Model.Reason", "Reason")
                        .WithMany("Votes")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
